(:~
 : This module contains some basic examples for RESTXQ annotations
 : @author BaseX Team
 :)

module namespace page = 'http://basex.org/modules/web-page';
declare default function namespace 'local' ;
(: import module namespace functx = "http://www.functx.com"; :)




(:~
 : This function generates the welcome page.
 : @return HTML page
 :)
declare
  %rest:path("/1")
  %output:method("xhtml")
  %output:omit-xml-declaration("no")
  %output:doctype-public("-//W3C//DTD XHTML 1.0 Transitional//EN")
  %output:doctype-system("http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd")
  function page:start()
  as element(Q{http://www.w3.org/1999/xhtml}html)
{
  <html xmlns="http://www.w3.org/1999/xhtml">
    <head>
      <title>BaseX HTTP Services</title>
      <link rel="stylesheet" type="text/css" href="static/style.css"/>
    </head>
    <body>
      <div class="right"><img src="static/basex.svg" width="96"/></div>
      <h2>BaseX HTTP Services</h2>
      <div>Welcome to the BaseX HTTP Services. They allow you to:</div>
      <ul>
        <li>Query and modify databases via <a href="http://docs.basex.org/wiki/REST">REST</a> (try <a href='rest'>here</a>),</li>
        <li>Browse and update resources via <a href="http://docs.basex.org/wiki/WebDAV">WebDAV</a>, and</li>
        <li>Create web applications and services with <a href="http://docs.basex.org/wiki/RESTXQ">RESTXQ</a></li>
      </ul>

      <p>Single services can be deactivated by modifying the <code>web.xml</code> file.</p>

      <p>The <a href="dba">Database Administration</a> interface (DBA) is an
      example for a full RESTXQ web application.<br/>
      Both DBA and the following examples may help you to create your own web sites:</p>

      <h3>Example 1</h3>
      <p>The following links return different results.
      Both are generated by the same RESTXQ function:</p>
      <ul>
        <li><a href="hello/World">/hello/World</a></li>
        <li><a href="hello/Universe">/hello/Universe</a></li>
      </ul>

      <h3>Example 2</h3>
      <p>The next example presents how form data is processed via RESTXQ and the POST method:</p>
      <form method="post" action="form">
        <p>Your message:<br />
        <input name="message" size="50"></input>
        <input type="submit" /></p>
      </form>

      <h3>Example 3</h3>
      <p>The source code of the file that created this page
      (<code>{ fn:static-base-uri() }</code>) is shown below:</p>
      <pre>{ fn:unparsed-text(fn:static-base-uri()) }</pre>
    </body>
  </html>
};

(:~
 : This function returns an XML response message.
 : @param $world  string to be included in the response
 : @return response element 
 :)
declare
  %rest:path("/hello/{$world}")
  %rest:GET
  function page:hello(
    $world as xs:string)
    as element(response)
{
  <response>
    <title>Hello { $world }!</title>
    <time>The current time is: { fn:current-time() }</time>
  </response>
};

(:~
 : This function returns the result of a form request.
 : @param  $message  message to be included in the response
 : @param $agent  user agent string
 : @return response element 
 :)
declare
  %rest:path("/form")
  %rest:POST
  %rest:form-param("message","{$message}", "(no message)")
  %rest:header-param("User-Agent", "{$agent}")
  function page:hello-postman(
    $message as xs:string,
    $agent   as xs:string*)
    as element(response)
{
  <response type='form'>
    <message>{ $message }</message>
    <user-agent>{ $agent }</user-agent>
  </response>
};



declare
  %rest:path("/sph/titles/{$idTitle}")
  %rest:GET
  function page:getTitles($idTitle as xs:string)
    as element(response)
{
    (: ouvre la base XML:)
    let $sph := db:open("sph")/html
    
    for $title in $sph/head/meta[@name="DC.title"]
    return   
      <response>
        <title xml:id="pouet">{fn:data($title/@content)}</title>        
      </response>
};


(:~  
Récupère le titre d'un article par son id
On pourra passer le body et tout le header
:)  

declare
  %rest:path("/sph/articleTitle/{$idArticle}")
  %rest:GET
  function page:getArticleTitle($idArticle as xs:string)
    as element(response)
{
    (: ouvre la base XML:)
    let $article := db:open("sph", $idArticle || ".html")/html
    
      return   
      <response>
        <title xml:id="{$idArticle}">{fn:data($article/head/meta[@name="DC.title"]/@content)}</title>        
      </response>
};


(: liste des articles par nom d'auteur 
   fonction à merger avec liste des articles par ID Orcid, avec passage d'un paramètre selon "nom" ou "orcidID"
:)
declare
  %rest:path("/sph/author/sn/{$authorSurname}")
  %rest:GET
  function page:getArticleByAuthorSurname($authorSurname as xs:string)
    as element(response)
{
    (: ouvre la base XML:)
    let $articles := db:open("sph")[//meta/@name="author" and //meta/@surname=$authorSurname]
    return   
      <response>
        <listArticles>{
          for $article in $articles/html
            let $title := fn:data($article/head/meta[@name="DC.title"]/@content)
            return <title xml:id="pouet">{$title}</title>
            }
        </listArticles>
      </response>
};

(: liste des articles par ID Orcid d'auteur :)
declare
  %rest:path("/sph/author/oc/{$authorIDorcid}")
  %rest:GET
  function page:getArticleByAuthorIDorcid($authorIDorcid as xs:string)
    as element(response)
{
    (: ouvre la base XML:)
    let $articles := db:open("sph")[//meta/@name="author" and //meta/@orcid=$authorIDorcid]
    return   
      <response>
        <listArticles>{
          for $article in $articles/html
            let $title := fn:data($article/head/meta[@name="DC.title"]/@content)
            return <title xml:id="pouet">{$title}</title>
            }
        </listArticles>
      </response>
};


(: liste des auteurs :)
declare
  %rest:path("/sph/authors")
  %rest:GET
  function page:getAuthors()
    as element(response)
{
    (: ouvre la base XML:)
     let $authors := db:open("sph")//meta[@name="DC.creator"]
    let $authors := fn:distinct-values($authors/@content)
    return   
      <response>
        <listAuthors>{
          for $author in $authors
            return <author xml:id="pouet">{$author}</author>
            }
        </listAuthors>
      </response>
};


(: Récupère tout un article par son id :)

declare
 %rest:path("/sph/article/{$idArticle}")
 %rest:GET
 function page:getArticle($idArticle as xs:string)
   as element(response)
{
   (: ouvre la base XML:)
   let $article := db:open("sph", $idArticle || ".html")
   
     return  
     <response>
       {$article/html}      
     </response>
};
